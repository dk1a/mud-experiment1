// SPDX-License-Identifier: MIT 
pragma solidity >=0.8.0;

// NOTE: This file is autogenerated via `mud codegen-libdeploy` from `deploy.json`. Do not edit manually.

// Foundry
import { DSTest } from "ds-test/test.sol";
import { console } from "forge-std/console.sol";

// Solecs 
import { IWorld } from "solecs/interfaces/IWorld.sol";
import { World } from "solecs/World.sol";
import { IComponent } from "solecs/interfaces/IComponent.sol";
import { getAddressById } from "solecs/utils.sol";
import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { ISystem } from "solecs/interfaces/ISystem.sol";

// Components (requires 'components=...' remapping in project's remappings.txt)
import { ArenaStartTimeComponent, ID as ArenaStartTimeComponentID } from "components/ArenaStartTimeComponent.sol";
import { ArmorComponent, ID as ArmorComponentID } from "components/ArmorComponent.sol";
import { DamageComponent, ID as DamageComponentID } from "components/DamageComponent.sol";
import { EnergyComponent, ID as EnergyComponentID } from "components/EnergyComponent.sol";
import { EnergySpentComponent, ID as EnergySpentComponentID } from "components/EnergySpentComponent.sol";
import { FromPrototypeComponent, ID as FromPrototypeComponentID } from "components/FromPrototypeComponent.sol";
import { HealthComponent, ID as HealthComponentID } from "components/HealthComponent.sol";
import { PositionComponent, ID as PositionComponentID } from "components/PositionComponent.sol";
import { QueueComponent, ID as QueueComponentID } from "components/QueueComponent.sol";
import { QueueNonceComponent, ID as QueueNonceComponentID } from "components/QueueNonceComponent.sol";
import { RosterComponent, ID as RosterComponentID } from "components/RosterComponent.sol";
import { WinCountComponent, ID as WinCountComponentID } from "components/WinCountComponent.sol";

// Systems (requires 'systems=...' remapping in project's remappings.txt)
import { ArenaInitSystem, ID as ArenaInitSystemID } from "systems/ArenaInitSystem.sol";
import { MovementSystem, ID as MovementSystemID } from "systems/MovementSystem.sol";
import { UpgradeSystem, ID as UpgradeSystemID } from "systems/UpgradeSystem.sol";
import { ComponentDevSystem, ID as ComponentDevSystemID } from "systems/ComponentDevSystem.sol";

struct DeployResult {
  IWorld world;
  address deployer;
}

library LibDeploy {
  function deploy(
    address _deployer,
    address _world,
    bool _reuseComponents
  ) internal returns (DeployResult memory result) {
    result.deployer = _deployer;

    // ------------------------
    // Deploy 
    // ------------------------

    // Deploy world
    result.world = _world == address(0) ? new World() : IWorld(_world);
    if (_world == address(0)) result.world.init(); // Init if it's a fresh world

    // Deploy components
    if (!_reuseComponents) {
      IComponent comp;

      console.log("Deploying ArenaStartTimeComponent");
      comp = new ArenaStartTimeComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying ArmorComponent");
      comp = new ArmorComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying DamageComponent");
      comp = new DamageComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying EnergyComponent");
      comp = new EnergyComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying EnergySpentComponent");
      comp = new EnergySpentComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying FromPrototypeComponent");
      comp = new FromPrototypeComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying HealthComponent");
      comp = new HealthComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PositionComponent");
      comp = new PositionComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying QueueComponent");
      comp = new QueueComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying QueueNonceComponent");
      comp = new QueueNonceComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying RosterComponent");
      comp = new RosterComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying WinCountComponent");
      comp = new WinCountComponent(address(result.world));
      console.log(address(comp));
    } 
    
    // Deploy systems 
    deploySystems(address(result.world), true);
  }
  
  function authorizeWriter(
    IUint256Component components,
    uint256 componentId,
    address writer
  ) internal {
    IComponent(getAddressById(components, componentId)).authorizeWriter(writer);
  }
  
  /**
   * Deploy systems to the given world.
   * If `init` flag is set, systems with `initialize` setting in `deploy.json` will be executed.
   */
  function deploySystems(
    address _world,
    bool init
  ) internal {
    IWorld world = IWorld(_world);
    // Deploy systems
    ISystem system; 
    IUint256Component components = world.components();

    console.log("Deploying ArenaInitSystem");
    system = new ArenaInitSystem(world, address(components));
    world.registerSystem(address(system), ArenaInitSystemID);
    authorizeWriter(components, ArenaStartTimeComponentID, address(system));
    authorizeWriter(components, ArmorComponentID, address(system));
    authorizeWriter(components, DamageComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, EnergySpentComponentID, address(system));
    authorizeWriter(components, FromPrototypeComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, QueueComponentID, address(system));
    authorizeWriter(components, QueueNonceComponentID, address(system));
    authorizeWriter(components, RosterComponentID, address(system));
    authorizeWriter(components, WinCountComponentID, address(system));
    console.log(address(system));

    console.log("Deploying MovementSystem");
    system = new MovementSystem(world, address(components));
    world.registerSystem(address(system), MovementSystemID);
    authorizeWriter(components, ArenaStartTimeComponentID, address(system));
    authorizeWriter(components, ArmorComponentID, address(system));
    authorizeWriter(components, DamageComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, EnergySpentComponentID, address(system));
    authorizeWriter(components, FromPrototypeComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, QueueComponentID, address(system));
    authorizeWriter(components, QueueNonceComponentID, address(system));
    authorizeWriter(components, RosterComponentID, address(system));
    authorizeWriter(components, WinCountComponentID, address(system));
    console.log(address(system));

    console.log("Deploying UpgradeSystem");
    system = new UpgradeSystem(world, address(components));
    world.registerSystem(address(system), UpgradeSystemID);
    authorizeWriter(components, ArenaStartTimeComponentID, address(system));
    authorizeWriter(components, ArmorComponentID, address(system));
    authorizeWriter(components, DamageComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, EnergySpentComponentID, address(system));
    authorizeWriter(components, FromPrototypeComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, QueueComponentID, address(system));
    authorizeWriter(components, QueueNonceComponentID, address(system));
    authorizeWriter(components, RosterComponentID, address(system));
    authorizeWriter(components, WinCountComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ComponentDevSystem");
    system = new ComponentDevSystem(world, address(components));
    world.registerSystem(address(system), ComponentDevSystemID);
    authorizeWriter(components, ArenaStartTimeComponentID, address(system));
    authorizeWriter(components, ArmorComponentID, address(system));
    authorizeWriter(components, DamageComponentID, address(system));
    authorizeWriter(components, EnergyComponentID, address(system));
    authorizeWriter(components, EnergySpentComponentID, address(system));
    authorizeWriter(components, FromPrototypeComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, QueueComponentID, address(system));
    authorizeWriter(components, QueueNonceComponentID, address(system));
    authorizeWriter(components, RosterComponentID, address(system));
    authorizeWriter(components, WinCountComponentID, address(system));
    console.log(address(system));
  }
}
